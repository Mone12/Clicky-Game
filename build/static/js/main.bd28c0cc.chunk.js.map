{"version":3,"sources":["components/nav/nav.js","components/header/index.js","components/container/index.js","components/column/index.js","components/row/index.js","components/friendcard/friendcard.js","components/footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","title","id","correctIncorrect","score","topScore","Header","Container","fluid","children","Column","size","split","map","join","Row","FriendCard","value","onClick","handleClick","alt","name","src","image","Footer","randomFriends","array","i","length","j","Math","floor","random","App","state","friends","currentScore","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledFriends","this","friend","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"klCAqBeA,G,MAlBH,SAAAC,GAAK,OACf,yBAAKC,UAAW,8DAEZ,uBAAGA,UAAU,gBAAeC,KAAK,gBAAgBF,EAAMG,OAEvD,wBAAIF,UAAW,8BAEjB,wBAAIA,UAAW,uBAAf,6BAEE,wBAAIA,UAAW,gCAAgCG,GAAG,MAAMJ,EAAMK,kBAE9D,wBAAIJ,UAAU,6CAAd,kBAA0ED,EAAMM,OAEhF,wBAAIL,UAAU,+CAAd,cAAwED,EAAMO,c,MCArEC,MAbf,WAEI,OACI,yBAAKP,UAAU,yCACf,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,wBAAd,gBACA,wBAAIA,UAAU,WAAd,uBACA,wBAAIA,UAAU,WAAd,+ECHKQ,EALG,SAAAT,GAAK,OACrB,yBAAKC,UAAS,mBAAcD,EAAMU,MAAQ,SAAW,KAClDV,EAAMW,WCOIC,EATA,SAAAZ,GACb,IAAMa,EAAOb,EAAMa,KAAKC,MAAM,KAAKC,KAAI,SAAAF,GAAI,MAAI,OAASA,KAAMG,KAAK,KACnE,OACE,yBAAKf,UAAWY,GACbb,EAAMW,WCCEM,EALH,SAAAjB,GAAK,OACf,yBAAKC,UAAS,aAAQD,EAAMU,MAAQ,SAAW,KAC5CV,EAAMW,WCWIO,G,MAZI,SAAAlB,GAAK,OACtB,yBACEC,UAAU,OACVkB,MAAOnB,EAAMI,GACbgB,QAAS,kBAAMpB,EAAMqB,YAAYrB,EAAMI,MAEvC,yBAAKH,UAAU,iBACb,yBAAKqB,IAAKtB,EAAMuB,KAAMC,IAAKxB,EAAMyB,Y,MCExBC,MATf,WAEI,OACG,4BAAQzB,UAAU,4CACf,mD,aCOV,SAAS0B,EAAcC,GACrB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IA2FMO,E,4MAtFbC,MAAQ,CACNC,UACAC,aAAc,EACd/B,SAAU,EACVF,iBAAkB,GAClBkC,QAAS,I,EAGXlB,YAAc,SAAAjB,IAC4B,IAApC,EAAKgC,MAAMG,QAAQC,QAAQpC,IAC7B,EAAKqC,kBACL,EAAKC,SAAS,CAAEH,QAAS,EAAKH,MAAMG,QAAQI,OAAOvC,MAEnD,EAAKwC,e,EAITH,gBAAkB,WAChB,IAAMI,EAAW,EAAKT,MAAME,aAAe,EAC3C,EAAKI,SAAS,CACZJ,aAAcO,EACdxC,iBAAkB,2BAEhBwC,GAAY,EAAKT,MAAM7B,SACzB,EAAKmC,SAAS,CAAEnC,SAAUsC,IAEN,KAAbA,GACP,EAAKH,SAAS,CAAErC,iBAAkB,aAEpC,EAAKyC,iB,EAGPF,YAAc,WACZ,EAAKF,SAAS,CACZJ,aAAc,EACd/B,SAAU,EAAK6B,MAAM7B,SACrBF,iBAAkB,2BAClBkC,QAAS,KAEX,EAAKO,iB,EAGPA,cAAgB,WACd,IAAIC,EAAkBpB,EAAcU,GACpC,EAAKK,SAAS,CAAEL,QAASU,K,uDAGjB,IAAD,OACT,OACA,oCACE,kBAAC,EAAD,CACD5C,MAAM,cACLG,MAAO0C,KAAKZ,MAAME,aAClB/B,SAAUyC,KAAKZ,MAAM7B,SACrBF,iBAAkB2C,KAAKZ,MAAM/B,mBAE7B,kBAAC,EAAD,MAED,kBAAC,EAAD,KACO,kBAAC,EAAD,KACG2C,KAAKZ,MAAMC,QAAQtB,KAAI,SAAAkC,GAAM,OAC5B,kBAAC,EAAD,CAAQpC,KAAK,aACX,kBAAC,EAAD,CACEqC,IAAKD,EAAO7C,GACZiB,YAAa,EAAKA,YAClBoB,gBAAiB,EAAKA,gBACtBG,YAAa,EAAKA,YAClBE,cAAe,EAAKA,cACpB1C,GAAI6C,EAAO7C,GACXqB,MAAOwB,EAAOxB,cAU5B,kBAAC,EAAD,W,GAjFc0B,aCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd28c0cc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nconst Nav = props => (\n  <nav className= \"navbar navbar-expand-lg navbar-dark justify-content-center\">\n    \n      <a className=\"navbar-brand \"href=\"/clicky-game\">{props.title}</a>\n      \n      <ul className= \"nav justify-content-center\">\n\n    <li className= \"nav-item text-light\">Click any image to begin!</li>\n\n      <li className= \"nav-item scoreitem text-light\" id=\"rw\">{props.correctIncorrect}</li>\n\n      <li className=\" nav-item  scoreitem text-light score-num\">Current Score: {props.score}</li>\n\n      <li className=\"nav-item scoreitem text-light score-num top\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;","import React from 'react'\nimport \"./style.css\"\n\nfunction Header() {\n    // Intro section\n    return (\n        <div className=\"jumbotron jumbotron-fluid text-center\">\n        <div className=\"container introcontainer\">\n          <h1 className=\"display-4 introtitle\">Clicky Game!</h1>\n          <h4 className=\"h4title\">Sailor Moon Edition</h4>\n          <h2 className=\"descrip\">Click on an image to earn points, but don't click on any more than once!</h2>\n        </div>\n      </div>\n    )\n};\n\nexport default Header;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst FriendCard = props => (\n  <div \n    className=\"card\" \n    value={props.id} \n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default FriendCard;","import React from 'react'\nimport \"./style.css\"\n\nfunction Footer() {\n    // Footer section\n    return (\n       <footer className=\"navbar text-light justify-content-center\">\n          <h5> @ copyright 2020</h5>\n       </footer>\n    )\n};\n\nexport default Footer;","import React, {Component}from 'react';\nimport Nav from \"./components/nav\";\nimport Header from \"./components/header\";\n\nimport Container from \"./components/container\";\nimport Column from \"./components/column\";\nimport Row from \"./components/row\";\nimport FriendCard from \"./components/friendcard/\";\nimport Footer from \"./components/footer\";\nimport friends from \"./friends.json\"\nimport './App.css';\n\n\n// Random shuffle\nfunction randomFriends(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  // Set this.state\n  state = {\n    friends,\n    currentScore: 0,\n    topScore: 0,\n    correctIncorrect: \"\",\n    clicked: []\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      correctIncorrect: \"You guessed correctly!\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 12) {\n      this.setState({ correctIncorrect: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"You guessed incorrectly!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = randomFriends(friends);\n    this.setState({ friends: shuffledFriends });\n  };\n\n  render() {\n  return (\n  <>\n    <Nav \n   title=\"Clicky Game\"\n    score={this.state.currentScore}\n    topScore={this.state.topScore}\n    correctIncorrect={this.state.correctIncorrect}\n    />\n    <Header />\n\n   <Container>\n          <Row>\n            {this.state.friends.map(friend => (\n              <Column size=\"md-3 sm-6\">\n                <FriendCard\n                  key={friend.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={friend.id}\n                  image={friend.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container> \n\n\n\n    \n    <Footer />\n</>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}